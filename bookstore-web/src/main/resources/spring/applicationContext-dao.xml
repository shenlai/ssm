<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- 加载数据库属性文件 -->
	<!-- <properties resource="db.properties"> </properties> -->
	<!-- 开启懒加载配置 -->
	<settings>
		<!-- 全局性设置懒加载。如果设为‘false'，则所有相关联的都会被初始化加载。 -->
		<setting name="lazyLoadingEnabled" value="true" />
		<!-- 当设置为‘true'的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。 -->
		<setting name="aggressiveLazyLoading" value="false" />
	</settings>
	<typeAliases>
		<!-- <typeAlias type="com.sl.po.Product" alias="product" /> com.sl.po.Product 
			定义别名 product -->

		<!-- 批量定义别名 mybatis自动扫描包中的po类，自动定义别名，别名是类名(首字母大写或小写都可以,一般用小写) -->
		<package name="com.sl.po" />

	</typeAliases>
	<!-- 注意：environments标签，当mybatis和spring整合之后，这个标签是不用配置的 -->

	<!-- 可以配置多个运行环境，但是每个SqlSessionFactory实例只能选择一个运行环境 一、development：开发模式 二、work:工作模式 -->
	<environments default="development">
		<!-- id属性必须和上面的defaut一致 -->
		<environment id="development">
			<!--事务管理 一、这个配置直接简单实用了 JDBC的提交和回滚设置，它依赖于从数据源得到的连接来管理事务范围 二、MANAGED:这个配置几乎没做什么， 
				它从来不提交或回滚一个连接，而它会让容器来管理事务的整个生命周期 比如spring或JEE应用服务器的上下文，默认它会关闭连接，然而一些容器并不希望这样， 
				因此如果你需要从连接中停止它，就可以将 closeConnection 属性设置为 false，比如： <transactionManager type="MANAGED"> 
				<property name="closeConnection" value="false"/> </transactionManager> -->
			<transactionManager type="JDBC"></transactionManager>
			<!--dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象源 -->
			<!-- <dataSource type="POOLED"> <property name="driver" value="${jdbc.driver}"></property> 
				<property name="url" value="${jdbc.url}"></property> <property name="username" 
				value="${jdbc.username}" /> <property name="password" value="${jdbc.password}" 
				/> </dataSource> -->
			<dataSource type="POOLED">
				<property name="driver" value="com.mysql.jdbc.Driver" />
				<property name="url"
					value="jdbc:mysql://localhost:3306/bookstore?useUnicode=true&amp;characterEncoding=UTF-8" />
				<property name="username" value="root" />
				<property name="password" value="123456" />
			</dataSource>
		</environment>
	</environments>



	<mappers>
		<!-- xml实现 注册productMapper.xml文件， productMapper.xml位于com.sl.mapper这个包下,所以resource写成com/sl/mapper/userMapper.xml -->
		<mapper resource="com/sl/mapper/productMapper.xml"></mapper>

		<!-- 注解实现 注册ProductMapper -->
		<!-- <mapper class="com.sl.annocation.ProductMapper"></mapper> -->

	</mappers>
</configuration>